How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Isolating just the changes between the two files made reviewing the code much faster plus having the '-' and '+'
    was an effective way to determine what type of changes were made.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It reduces the need to review previous versions of code line by line.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    I can try out different code variations in my "working copy" to see what works then commit a final version that works best.
    It also reduces the cluttering the version history with inconsequential and/or experimental changes.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git hub appears to be designed for programmers who typically work on multiple files for one project. 
    Google Docs is designed for users that typically work on one document at a time. 

How can you use the commands git log and git diff to view the history of files?

    Git log provides a list of the commits I've made for the repository(directory) each commit has a unique ID. I can use that unique ID to compare two different commits using the 'git diff' command.

How might using version control make you more confident to make changes that
could break something?

    Because I have a system that facilitates debugging and rolling back changes to my project.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use Git for all my programming and data science assignments and projects.
    
